@charset "UTF-8";
/*------------------------------------*    #PULLING IN CONTENTS
\*------------------------------------*/
/*------------------------------------*  #DEBUG
\*------------------------------------*/
/*
    pesticide v0.1.0 . @mrmrs . MIT
*/
/**
 * #SETTINGS
 */
/*!
 * CTC - COTTON THOMPSON COLE
 * Author: Will Russell, 
 *         Ragged Edge
 */
/*------------------------------------*    #GLOBAL TOOLS
\*------------------------------------*/
/*------------------------------------*    #GLOBAL
\*------------------------------------*/
/*------------------------------------*    #COLORS
\*------------------------------------*/
/*------------------------------------*    #SETTINGS-RESPONSIVE
\*------------------------------------*/
/**
 * #TOOLS
 */
/*------------------------------------*    #FUNCTIONS
\*------------------------------------*/
/*------------------------------------*    #MIXINS
\*------------------------------------*/
/*  #Font face mixin
--------------------------------------*/
/*  #Responsive breakpoints mixin
--------------------------------------*/
/*  #Size helper
--------------------------------------*/
/*  #placeholder helper
--------------------------------------*/
/**
 * #GENERIC
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 0; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

:root {
  -ms-overflow-style: -ms-autohiding-scrollbar;
  overflow-y: scroll;
  -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
          text-size-adjust: 100%; }

input[type="number"] {
  width: auto; }

input[type="search"] {
  -webkit-appearance: textfield; }
  input[type="search"]::-webkit-search-cancel-button,
  input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

[unselectable] {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }

textarea {
  resize: vertical; }

@media screen {
  [hidden~="screen"] {
    display: inherit; }
  [hidden~="screen"]:not(:active):not(:focus):not(:target) {
    clip: rect(0 0 0 0) !important;
    position: absolute !important; } }

/*------------------------------------*    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr, button {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/**
 * Media fix
 */
audio,
canvas,
iframe,
img,
video,
svg {
  vertical-align: middle; }

img {
  max-width: 100%;
  height: auto; }
  img[src*=".svg"] {
    width: 100% \9; }

_::-ms-reveal,
img[src*=".svg"] {
  width: 100%; }

a img {
  border: none; }

/*------------------------------------*    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

/*------------------------------------*    #SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p,
hr,
table,
fieldset,
pre,
.l-margin-top {
  margin-top: 1.25rem; }

/**
 * #BASE
 */
/*------------------------------------*    #PAGE
\*------------------------------------*/
/*------------------------------------*    #PAGE
\*------------------------------------*/
html {
  background-color: white;
  color: black;
  overflow-y: scroll;
  min-height: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeSpeed; }
  @media screen and (min-width: 116.25em) {
    html {
      font-size: 125%; } }

body {
  font-weight: 400; }

.site__inner {
  padding-top: 5rem; }
  @media screen and (min-width: 50em) {
    .site__inner {
      padding-top: 11.25rem; } }

/*------------------------------------*    #TYPE
\*------------------------------------*/
/**
 * Headings 1–6.
 */
h1, .t-alpha,
h2, .t-beta,
h3, .t-gamma,
h4, .t-delta {
  font-weight: normal;
  text-rendering: optimizeLegibility; }

h1, .t-alpha {
  font-size: 1.4375rem;
  line-height: 1.875rem;
  letter-spacing: -0.01em; }
  @media screen and (min-width: 50em) {
    h1, .t-alpha {
      font-size: 2.5rem;
      line-height: 2.875rem; } }

h2, .t-beta,
h3, .t-gamma {
  font-size: 1.0625rem;
  line-height: 1.5625rem;
  letter-spacing: -0.01em; }
  @media screen and (min-width: 50em) {
    h2, .t-beta,
    h3, .t-gamma {
      font-size: 1.5rem;
      line-height: 1.75rem; } }

h4, .t-delta {
  letter-spacing: 0;
  font-size: 1.0625rem;
  line-height: 1.5rem; }

/**
 * Paragraphs.
 */
/**
 * Emboldened elements.
 */
strong, b, em, dt {
  font-weight: normal; }

/**
 * Horizontal rules.
 */
hr {
  border: none;
  border-top: 0.0625rem solid black;
  margin: 2.5rem auto; }
  @media screen and (min-width: 50em) {
    hr {
      margin: 3.75rem auto; } }

/**
 * Selection rules.
 */
::-moz-selection {
  text-shadow: none;
  background: black;
  color: #fff; }
::selection {
  text-shadow: none;
  background: black;
  color: #fff; }

/*------------------------------------*    #LINKS
\*------------------------------------*/
a {
  color: inherit;
  font-size: inherit;
  line-height: inherit; }
  a,
  a:hover,
  a:active,
  a:focus {
    outline: none;
    text-decoration: none; }

.link-subtle a {
  border-bottom: 0.0625rem solid transparent; }
  .link-subtle a:hover {
    border-bottom: 0.0625rem solid; }

/*------------------------------------*    #SVGs
\*------------------------------------*/
svg {
  display: inline-block; }

/*------------------------------------*    #GRID
\*------------------------------------*/
/*------------------------------------*    #FLEXBOX
\*------------------------------------*/
.flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }

/**
 * #OBJECTS
 */
/*------------------------------------*    #PAGE LOADER
\*------------------------------------*/
.switch {
  -webkit-transition: 165ms cubic-bezier(0.86, 0, 0.07, 1);
          transition: 165ms cubic-bezier(0.86, 0, 0.07, 1);
  -webkit-transition-property: opacity, -webkit-transform;
          transition-property: opacity, transform;
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }
  .switch.is-hidden {
    opacity: 0;
    -webkit-transform: translate3d(0, 2.5rem, 0);
            transform: translate3d(0, 2.5rem, 0); }

/*------------------------------------*  #WRAPPERS
\*------------------------------------*/
.wrapper {
  margin: 0 auto;
  padding-right: 1.25rem;
  padding-left: 1.25rem; }
  @media screen and (min-width: 30em) {
    .wrapper {
      max-width: 53.75em;
      padding-right: 2.5rem;
      padding-left: 2.5rem; } }
  @media screen and (min-width: 78.75em) {
    .wrapper {
      max-width: 78.75em; } }

/*------------------------------------*    #BUTTONS
\*------------------------------------*/
/**
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  margin: 0;
  /* [4] */
  cursor: pointer;
  /* [5] */
  overflow: visible;
  /* [6] */
  padding: 0.6875em 3.125em 0.675em;
  /* [7] */
  max-width: 23.75rem;
  background-color: black;
  border: none;
  /* [4] */
  border-radius: 0;
  font-size: 2.75rem;
  line-height: normal;
  text-decoration: none;
  color: white;
  -webkit-transition: 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);
          transition: 0.2s cubic-bezier(0.165, 0.84, 0.44, 1); }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*------------------------------------*    #LISTS
\*------------------------------------*/
.list {
  margin: 0;
  padding: 0;
  list-style: none; }

/*------------------------------------*    #MEDIA
\*------------------------------------*/
.media-wrapper {
  width: 100%;
  height: 0;
  background-color: black;
  position: relative; }
  .media-wrapper--1by1 {
    padding-bottom: 100%; }
  .media-wrapper--4by3 {
    padding-bottom: 74.9%; }

.media {
  width: 100%;
  position: absolute;
  opacity: 1; }

/**
 * #COMPONENTS
 */
/*------------------------------------*  #HAMBURGER
\*------------------------------------*/
/*------------------------------------*  #HEADER
\*------------------------------------*/
/*------------------------------------*  #FOOTER
\*------------------------------------*/
/**
 * #THEMES
 */
.styleguide {
  padding-top: 3.125rem;
  padding-bottom: 6.25rem; }
  .styleguide .sg-subheading {
    margin-top: 0;
    font-size: 30px; }
  .styleguide .sg-title {
    font-size: 18px;
    line-height: 26px;
    border-bottom: 1px solid;
    margin-top: 6.25rem; }
  .styleguide h1 + .sg-title {
    margin-top: 1.25rem; }

.palette {
  margin: 1.25rem 0 0;
  padding: 0; }

.palette__item {
  display: inline-block;
  margin: 0 2%; }

.palette__circle {
  display: block;
  width: 9.375rem;
  height: 9.375rem;
  border-radius: 50%; }
  .palette__circle--border {
    border: 0.0625rem solid; }

.palette__title {
  display: block; }

.sg-nav {
  position: fixed;
  right: 0;
  top: 11.875rem;
  z-index: 999; }
  .sg-nav li {
    background: #fff;
    border-top: 1px solid black;
    border-bottom: 1px solid black;
    border-left: 1px solid black;
    -webkit-transform: translate3d(3.75rem, 0, 0);
            transform: translate3d(3.75rem, 0, 0);
    -webkit-transition: 165ms cubic-bezier(0.86, 0, 0.07, 1);
            transition: 165ms cubic-bezier(0.86, 0, 0.07, 1); }
    .sg-nav li:hover {
      -webkit-transform: translate3d(0, 0, 0);
              transform: translate3d(0, 0, 0); }
    .sg-nav li + li {
      margin-top: -0.0625rem; }
  .sg-nav a {
    display: block;
    padding: 0.875rem 1.25rem 0.625rem; }

/**
 * #TRUMPS
 */
/*------------------------------------*    #SHOW-HIDE
\*------------------------------------*/
@media screen and (min-width: 30em) {
  .h-small-up {
    display: none !important; } }

@media screen and (min-width: 50em) {
  .h-med-up {
    display: none !important; } }

@media screen and (min-width: 78.75em) {
  .h-large-up {
    display: none; } }

@media screen and (max-width: 29.9375em) {
  .h-small-down {
    display: none !important; } }

@media screen and (max-width: 49.9375em) {
  .h-med-down {
    display: none !important; } }

@media screen and (max-width: 78.6875em) {
  .h-large-down {
    display: none; } }

/*------------------------------------*    #HELPERS
\*------------------------------------*/
.l-white {
  background-color: white !important; }

.l-white--hover:hover {
  background-color: white !important; }

.t-white {
  color: white !important; }

.t-white--hover:hover {
  color: white !important; }

.f-white svg {
  fill: white !important; }

.f-white--hover:hover svg {
  fill: white !important; }

.l-black {
  background-color: black !important; }

.l-black--hover:hover {
  background-color: black !important; }

.t-black {
  color: black !important; }

.t-black--hover:hover {
  color: black !important; }

.f-black svg {
  fill: black !important; }

.f-black--hover:hover svg {
  fill: black !important; }

.t-align-center {
  text-align: center; }

.t-align-right {
  text-align: right; }

@media screen and (min-width: 50em) {
  .t-align-ltr {
    text-align: right; } }

.l-center {
  margin-left: auto;
  margin-right: auto; }

.l-clear {
  clear: both; }

.l-cf, .palette {
  *zoom: 1; }
  .l-cf:before, .palette:before, .l-cf:after, .palette:after {
    content: " ";
    display: table; }
  .l-cf:after, .palette:after {
    clear: both; }

.l-right {
  float: right; }

.z-level-1 {
  z-index: 10; }

.z-level-2 {
  z-index: 20; }

.l-dis-block {
  display: block; }

.l-relative {
  position: relative; }

.l-abs-center {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
      -ms-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%); }

.t-hide {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden; }

/**
 * Font helpers.
 */
/*------------------------------------*    #SPACING
\*------------------------------------*/
.l-padding {
  padding: 1.25rem; }
  @media screen and (min-width: 50em) {
    .l-padding {
      padding: 2.5rem; } }

@media screen and (min-width: 78.75em) {
  .l-padding-right {
    padding-right: 5rem; } }

.l-margin-top {
  margin-top: 1.25rem !important; }

.l-margin-top--large {
  margin-top: 2.5rem !important; }

.l-margin-top--huge {
  margin-top: 3.75rem !important; }

.l-margin-bottom {
  margin-bottom: 1.25rem !important; }

.l-margin-bottom--large {
  margin-bottom: 2.5rem !important; }

.l-margin-bottom--huge {
  margin-bottom: 3.75rem !important; }

.l-margin-top--none {
  margin-top: 0 !important; }

/*# sourceMappingURL=data:application/json;base64, */